# SDR-Based RF Signal Classification

## Overview
This project implements an RF signal classification system using Software-Defined Radio (SDR), capable of detecting and classifying normal transmissions and jamming attacks (constant and pulsed jammers).

## Project Structure
- **Dataset/**: Contains the RSSI (Received Signal Strength Indicator) data
  - **training/**: Training data for the classifier
    - `Rssi_Normal.txt`: RSSI samples from normal channel transmissions
    - `Rssi_CJ.txt`: RSSI samples from constant jamming attacks
    - `Rssi_PJ.txt`: RSSI samples from pulsed jamming attacks
  - **USRP_Files_Binary/**: Binary data files from USRP (Universal Software Radio Peripheral)

- **model/**: Trained neural network models
  - `model_NewDataset.h5`: Model trained on the new dataset
  - `augmented_cnn_model_Last.h5`: Augmented CNN model

- **Notebooks/**: Jupyter notebooks for data analysis and model testing
  - `Testing_Balanced_Dataset.ipynb`: Analysis using a balanced dataset
  - `Testing_Model_Saved.ipynb`: Testing the saved model performance

- **src/**: Source code for SDR implementation
  - `MelegyTX.grc`: GNU Radio Companion file for transmitter
  - `MelegyTX.py`: Python script generated from the GRC file for transmitter
  - `receiver.grc`: GNU Radio Companion file for receiver
  - `receiver.py`: Python script generated from the GRC file for receiver

- **utils/**: Utility scripts for data processing
  - `extract_rssi.py`: Script to extract RSSI values from radio signals
  - `extract_fft_bins_one_per_line.py`: Script to extract FFT bins
  - `extract_fft_means.cpp`: C++ implementation of FFT mean extraction
  - `plot_random_rssi_samples.py`: Script to visualize random RSSI samples

## Getting Started

### Prerequisites
- Python 3.x
- TensorFlow
- NumPy
- Pandas
- Matplotlib
- scikit-learn
- GNU Radio (for SDR components)
- USRP Hardware Driver (UHD)

### Installation
1. Clone this repository
2. Install the required Python packages:
   ```bash
   pip install tensorflow numpy pandas matplotlib scikit-learn
   ```
3. Install GNU Radio and UHD following their official documentation

### Usage
1. **Data Collection**:
   - Use the receiver scripts in the `src/` directory to collect RF signals
   - Process the raw data using utilities in the `utils/` directory

2. **Training**:
   - Use the pre-processed data in the `Dataset/` directory
   - Run the training notebooks to train the models

3. **Testing**:
   - Use `Testing_Model_Saved.ipynb` to test the model performance
   - Load the model from `model/model_NewDataset.h5`
   - Test with 200 random samples from the dataset

### Model Performance
The model classifies signals into three categories:
- Normal RF transmissions
- Constant jammer attacks
- Pulsed jammer attacks

## Implementation Details

### Signal Types
- **Normal Signals**: Standard RF transmissions without interference
- **Constant Jammer**: Continuous jamming signal that disrupts communication
- **Pulsed Jammer**: Intermittent jamming signal that periodically disrupts communication

### Classification Algorithm
The project uses a deep learning approach for classification:
- Feature extraction from RSSI values
- Neural network model with both convolutional and dense layers
- Training with balanced dataset to avoid class bias

## Future Work
- Implementation of additional jamming types (e.g., reactive jamming)
- Real-time classification for immediate threat detection
- Integration with automated countermeasure systems
