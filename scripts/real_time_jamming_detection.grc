options:
  parameters:
    author: Omar
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: Real-time jamming detection using USRP 2901R and TensorFlow Lite
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: real_time_jamming_detection
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Real-time Jamming Detection
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '1000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: '915000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 12]
    rotation: 0
    state: enabled
- name: gain
  id: variable
  parameters:
    comment: ''
    value: '70'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 12]
    rotation: 0
    state: enabled
- name: fft_size
  id: variable
  parameters:
    comment: ''
    value: '1024'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 12]
    rotation: 0
    state: enabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: RX2
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: center_freq
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: '0.0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs_enb0: '""'
    dc_offs_enb1: '""'
    dc_offs_enb10: '""'
    dc_offs_enb11: '""'
    dc_offs_enb12: '""'
    dc_offs_enb13: '""'
    dc_offs_enb14: '""'
    dc_offs_enb15: '""'
    dc_offs_enb16: '""'
    dc_offs_enb17: '""'
    dc_offs_enb18: '""'
    dc_offs_enb19: '""'
    dc_offs_enb2: '""'
    dc_offs_enb20: '""'
    dc_offs_enb21: '""'
    dc_offs_enb22: '""'
    dc_offs_enb23: '""'
    dc_offs_enb24: '""'
    dc_offs_enb25: '""'
    dc_offs_enb26: '""'
    dc_offs_enb27: '""'
    dc_offs_enb28: '""'
    dc_offs_enb29: '""'
    dc_offs_enb3: '""'
    dc_offs_enb30: '""'
    dc_offs_enb31: '""'
    dc_offs_enb4: '""'
    dc_offs_enb5: '""'
    dc_offs_enb6: '""'
    dc_offs_enb7: '""'
    dc_offs_enb8: '""'
    dc_offs_enb9: '""'
    dev_addr: '""'
    dev_args: '""'
    gain0: gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    iq_imbal_enb0: '""'
    iq_imbal_enb1: '""'
    iq_imbal_enb10: '""'
    iq_imbal_enb11: '""'
    iq_imbal_enb12: '""'
    iq_imbal_enb13: '""'
    iq_imbal_enb14: '""'
    iq_imbal_enb15: '""'
    iq_imbal_enb16: '""'
    iq_imbal_enb17: '""'
    iq_imbal_enb18: '""'
    iq_imbal_enb19: '""'
    iq_imbal_enb2: '""'
    iq_imbal_enb20: '""'
    iq_imbal_enb21: '""'
    iq_imbal_enb22: '""'
    iq_imbal_enb23: '""'
    iq_imbal_enb24: '""'
    iq_imbal_enb25: '""'
    iq_imbal_enb26: '""'
    iq_imbal_enb27: '""'
    iq_imbal_enb28: '""'
    iq_imbal_enb29: '""'
    iq_imbal_enb3: '""'
    iq_imbal_enb30: '""'
    iq_imbal_enb31: '""'
    iq_imbal_enb4: '""'
    iq_imbal_enb5: '""'
    iq_imbal_enb6: '""'
    iq_imbal_enb7: '""'
    iq_imbal_enb8: '""'
    iq_imbal_enb9: '""'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    norm_gain0: 'False'
    norm_gain1: 'False'
    norm_gain10: 'False'
    norm_gain11: 'False'
    norm_gain12: 'False'
    norm_gain13: 'False'
    norm_gain14: 'False'
    norm_gain15: 'False'
    norm_gain16: 'False'
    norm_gain17: 'False'
    norm_gain18: 'False'
    norm_gain19: 'False'
    norm_gain2: 'False'
    norm_gain20: 'False'
    norm_gain21: 'False'
    norm_gain22: 'False'
    norm_gain23: 'False'
    norm_gain24: 'False'
    norm_gain25: 'False'
    norm_gain26: 'False'
    norm_gain27: 'False'
    norm_gain28: 'False'
    norm_gain29: 'False'
    norm_gain3: 'False'
    norm_gain30: 'False'
    norm_gain31: 'False'
    norm_gain4: 'False'
    norm_gain5: 'False'
    norm_gain6: 'False'
    norm_gain7: 'False'
    norm_gain8: 'False'
    norm_gain9: 'False'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 156.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fft_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 200.0]
    rotation: 0
    state: true
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fft_size
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: ()
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [456, 172.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_0
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 200.0]
    rotation: 0
    state: true
- name: blocks_nlog10_ff_0
  id: blocks_nlog10_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    n: '10'
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [808, 188.0]
    rotation: 0
    state: true
- name: qtgui_vector_sink_f_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: Spectrum
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    ref_level: '0'
    showports: 'False'
    update_time: '0.10'
    vlen: fft_size
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: Frequency Bin
    x_start: '0'
    x_step: '1.0'
    x_units: '""'
    y_axis_label: Magnitude (dB)
    y_max: '10'
    y_min: '-140'
    y_units: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 156.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nimport pickle\nimport os\nimport sys\n\n# Add scripts directory to path\nsys.path.append('/home/omar/Downloads/SDRv2/scripts')\n\ntry:\n    import tensorflow as tf\n    TFLITE_AVAILABLE = True\nexcept ImportError:\n    try:\n        import tflite_runtime.interpreter as tflite\n        TFLITE_AVAILABLE = True\n        USE_TFLITE_RUNTIME = True\n    except ImportError:\n        print(\"Error: TensorFlow Lite not available!\")\n        TFLITE_AVAILABLE = False\n\nfrom preprocess import RSSSIToMelSpectrogram\n\n\nclass JammingDetectionBlock(gr.sync_block):\n    \"\"\"\n    Custom GNU Radio block for real-time jamming detection.\n    \"\"\"\n    \n    def __init__(self, model_path='model/jamming_detector_lightweight.tflite', \n                 config_path='preprocessed_data/config.pkl', \n                 vector_length=1024):\n        gr.sync_block.__init__(\n            self,\n            name=\"jamming_detection\",\n            in_sig=[(np.float32, vector_length)],\n            out_sig=None\n        )\n        \n        self.vector_length = vector_length\n        self.downsample_factor = 40  # Take mean of every 40 points\n        self.points_per_signal = int(vector_length / self.downsample_factor)  # ~25\n        self.signal_length = 1000\n        self.class_names = ['Normal', 'Constant Jammer', 'Periodic Jammer']\n        \n        # Buffer for accumulating signal points\n        self.signal_buffer = []\n        \n        # Load model and config\n        self.load_model(model_path)\n        self.load_config(config_path)\n        \n        # Initialize preprocessing\n        self.preprocessor = RSSSIToMelSpectrogram(\n            sampling_rate=self.config.get('sampling_rate', 1000),\n            n_fft=self.config.get('n_fft', 256),\n            hop_length=self.config.get('hop_length', 128),\n            n_mels=self.config.get('n_mels', 64),\n            sequence_length=self.config.get('sequence_length', 1000)\n        )\n        \n        print(f\"Jamming Detection Block initialized:\")\n        print(f\"  Vector length: {self.vector_length}\")\n        print(f\"  Downsample factor: {self.downsample_factor}\")\n        print(f\"  Points per vector: {self.points_per_signal}\")\n        print(f\"  Signal length: {self.signal_length}\")\n    \n    def load_model(self, model_path):\n        \"\"\"Load TensorFlow Lite model.\"\"\"\n        try:\n            if 'USE_TFLITE_RUNTIME' in globals():\n                self.interpreter = tflite.Interpreter(model_path=model_path)\n            else:\n                self.interpreter = tf.lite.Interpreter(model_path=model_path)\n            \n            self.interpreter.allocate_tensors()\n            self.input_details = self.interpreter.get_input_details()\n            self.output_details = self.interpreter.get_output_details()\n            \n            print(f\"Model loaded: {model_path}\")\n            print(f\"Input shape: {self.input_details[0]['shape']}\")\n            print(f\"Output shape: {self.output_details[0]['shape']}\")\n            \n        except Exception as e:\n            print(f\"Error loading model: {e}\")\n            raise\n    \n    def load_config(self, config_path):\n        \"\"\"Load preprocessing configuration.\"\"\"\n        try:\n            with open(config_path, 'rb') as f:\n                self.config = pickle.load(f)\n            print(f\"Config loaded: {config_path}\")\n        except Exception as e:\n            print(f\"Warning: Could not load config: {e}\")\n            self.config = {\n                'sampling_rate': 1000,\n                'n_fft': 256,\n                'hop_length': 128,\n                'n_mels': 64,\n                'sequence_length': 1000\n            }\n    \n    def predict_signal(self, signal):\n        \"\"\"Make prediction on a complete signal.\"\"\"\n        try:\n            # Ensure signal is the right length\n            if len(signal) != self.signal_length:\n                if len(signal) > self.signal_length:\n                    signal = signal[:self.signal_length]\n                else:\n                    signal = np.pad(signal, (0, self.signal_length - len(signal)), 'constant')\n            \n            # Convert to mel spectrogram\n            mel_spec = self.preprocessor.signal_to_mel_spectrogram(signal)\n            \n            # Prepare input for model\n            input_data = mel_spec[np.newaxis, :, :, np.newaxis].astype(np.float32)\n            \n            # Run inference\n            self.interpreter.set_tensor(self.input_details[0]['index'], input_data)\n            self.interpreter.invoke()\n            \n            # Get output\n            output_data = self.interpreter.get_tensor(self.output_details[0]['index'])\n            \n            predicted_class = np.argmax(output_data[0])\n            confidence = np.max(output_data[0])\n            \n            return predicted_class, confidence\n            \n        except Exception as e:\n            print(f\"Error in prediction: {e}\")\n            return 0, 0.0\n    \n    def work(self, input_items, output_items):\n        \"\"\"Process input vectors.\"\"\"\n        in0 = input_items[0]\n        \n        for vector in in0:\n            # Downsample by taking mean of every 40 points\n            downsampled = []\n            for i in range(0, len(vector), self.downsample_factor):\n                chunk = vector[i:i + self.downsample_factor]\n                if len(chunk) > 0:\n                    downsampled.append(np.mean(chunk))\n            \n            # Add to signal buffer\n            self.signal_buffer.extend(downsampled)\n            \n            # Check if we have enough points for a complete signal\n            while len(self.signal_buffer) >= self.signal_length:\n                # Extract signal\n                signal = np.array(self.signal_buffer[:self.signal_length])\n                self.signal_buffer = self.signal_buffer[self.signal_length:]\n                \n                # Make prediction\n                predicted_class, confidence = self.predict_signal(signal)\n                \n                # Print prediction\n                class_name = self.class_names[predicted_class]\n                print(f\"Prediction: {class_name} (Confidence: {confidence:.2%})\")\n        \n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 300.0]
    rotation: 0
    state: true

connections:
- [uhd_usrp_source_0, '0', blocks_stream_to_vector_0, '0']
- [blocks_stream_to_vector_0, '0', fft_vxx_0, '0']
- [fft_vxx_0, '0', blocks_complex_to_mag_0, '0']
- [blocks_complex_to_mag_0, '0', blocks_nlog10_ff_0, '0']
- [blocks_nlog10_ff_0, '0', qtgui_vector_sink_f_0, '0']
- [blocks_nlog10_ff_0, '0', epy_block_0, '0']

metadata:
  file_format: 1
